# vim: ft=python
import glob
import pandas as pd

configfile: 'typeseq_config.yaml'
workdir: os.environ['PWD']
shell.executable('bash')



rule dev_dmx_all:
    input:
        expand('read_names_demux2/{bc1}.{bc2}.readnames.txt', bc2=bc2s, bc1=bc1s),
        expand('demux2_bams/{bc1}.{bc2}.bam', bc1=bc1s, bc2=bc2s)


# samtools fastq would probably be better here but I ran into bugs back in
# December. Eventually do some bakeoffs to see which program is fastest
rule rawlib_bam_to_fastq:
    input: 'single_demux_bams/IonXpress_{bc1}_rawlib.bam'
    output: 'fastq_rawlib/{bc1}.demux1.fastq'
    threads: 2
    shell:
        'bamtofastq < {input} > {output}'


### Create a rule that will parse the barcodes into multiple lists by length
### see /CGF/Sequencing/Analysis/Research/RD111_HPVTyping/RD111_typing_DOI_Exp1_20210319


rule demux_fastq:
    input: 'fastq_rawlib/{bc1}.demux1.fastq'
    output: expand('fastq_demux2/{{bc1}}.{bc2}.fastq', bc2=bc2s)
    threads: 2
    params:
        bc1 = 'barcodes/barcodeList_TypingV1_v2-barcodes_01.tsv'
    shell: '''
        cat {input} | \
            fastx_barcode_splitter.pl \
            --bcfile {params.bc1} \
            --partial 1 \
            --mismatches 1 \
            --prefix fastq_demux2/{wildcards.bc1}. \
            --suffix .fastq \
            --eol
        '''

rule get_read_names:
    input: 'fastq_demux2/{bc1}.{bc2}.fastq'
    output: 'read_names_demux2/{bc1}.{bc2}.readnames.txt'
    shell: """
        awk 'NR %4 == 1 ' {input} > {output}
        sed -i 's/^@//g' {output}
        """


rule subset_rawlib_bams:
    input:
        bam = 'single_demux_bams/IonXpress_{bc1}_rawlib.bam',
        read = expand('read_names_demux2/{{bc1}}.{bc2}.readnames.txt', bc2=bc2s)
    output:
        expand('demux2_bams/{{bc1}}.{bc2}.bam', bc2=bc2s)
    threads: 2
    run:
        for fname in input.read:
            bc1 = fname.split('/')[-1].split('.')[0]
            bc2 = fname.split('/')[-1].split('.')[1]
            shell('samtools view -h -@ {threads} -N {fname} {input.bam} > demux2_bams/%s.%s.bam' %(bc1, bc2))


